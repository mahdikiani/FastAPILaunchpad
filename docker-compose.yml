services:  
  app:
    build: app
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - data
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}.rule=Host(`${DOMAIN}`)"
      # - "traefik.http.routers.${PROJECT_NAME}.middlewares=https-redirect"
      - "traefik.http.routers.${PROJECT_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.${PROJECT_NAME}.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik-net"

  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - ./redis.data:/data
    networks:
      - data

  mongo:
    image: mongo:latest
    restart: unless-stopped
    volumes:
      - ./mongo.data:/data/db
    networks:
      - data

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: "27017"
    networks:
      - data
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express.rule=Host(`mongo.${DOMAIN}`)"
      - "traefik.http.services.${PROJECT_NAME}-mongo-express.loadbalancer.server.port=8081"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.rule=Host(`mongo.${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.tls.certresolver=letsencrypt"
      - "traefik.docker.network=traefik-net"

networks:
  data:
  traefik-net:
    external: true